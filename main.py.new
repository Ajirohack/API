"""
Main entry point for the Space API
Registers all API routes and configures middleware with improved security and organization
"""
import logging
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.errors import RateLimitExceeded
from slowapi.util import get_remote_address

from api.routes import character_profiles, fmt_templates, health, metrics, engine, plugin_system, plugins, storage, interface_adapter, endpoint_status, auth
from api.context_providers.mem0_provider import router as mem0_router
from api.mcp_adapter import router as mcp_router
from core.endpoint_tracking.integration import autodiscover_endpoints
from config.settings import settings

# Structured logging setup
logger = logging.getLogger("archivist.api")
logging.basicConfig(
    level=logging.getLevelName(settings.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# Rate limiter setup
limiter = Limiter(key_func=get_remote_address, default_limits=[f"{settings.RATE_LIMIT_PER_MINUTE}/minute"])

# Define startup and shutdown events
@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Startup and shutdown events for the API
    """
    # Startup: Load default character if needed
    logger.info(f"Starting Space API in {settings.ENVIRONMENT} environment...")
    try:
        from database.connection import get_db_session
        from database.models.character_profile import CharacterProfile
        from database.samples.diego_camilleri_profile import create_diego_camilleri
        
        # Check if Diego exists, create if not
        db = next(get_db_session())
        existing_diego = db.query(CharacterProfile).filter(
            CharacterProfile.name == "Diego Camilleri"
        ).first()
        
        if not existing_diego:
            logger.info("Diego Camilleri not found, creating default character...")
            diego = create_diego_camilleri(db)
            logger.info(f"Created Diego Camilleri with ID: {diego.id}")
    except Exception as e:
        logger.error(f"Error setting up default character: {str(e)}")
    
    yield
    
    # Discover and register all endpoints
    try:
        logger.info("Autodiscovering API endpoints...")
        endpoint_discovery = autodiscover_endpoints(app)
        logger.info(f"Discovered {endpoint_discovery['total']} API endpoints")
    except Exception as e:
        logger.error(f"Error autodiscovering endpoints: {str(e)}")
        
    # Cleanup on shutdown
    logger.info("Shutting down Space API...")

# Create FastAPI app with versioning
app = FastAPI(
    title="Space API",
    description="API for the Space project with character system and plugin support",
    version=settings.API_VERSION,
    root_path=f"/api/v{settings.API_VERSION.split('.')[0]}",
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json"
)

# Configure CORS with settings from config
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=settings.CORS_ALLOW_CREDENTIALS,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Add rate limiting
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

# Add trusted host middleware in production
if settings.ENVIRONMENT == "production":
    app.add_middleware(
        TrustedHostMiddleware, 
        allowed_hosts=settings.ALLOWED_HOSTS
    )

# Error handling middleware
@app.middleware("http")
async def error_handling_middleware(request: Request, call_next):
    try:
        return await call_next(request)
    except Exception as e:
        logger.error(f"Unhandled exception: {str(e)}", exc_info=True)
        return JSONResponse(
            status_code=500,
            content={"detail": "Internal server error"}
        )

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    logger.error(f"Unhandled exception: {str(exc)}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={
            "status": "error",
            "message": "Internal server error",
            "detail": str(exc) if settings.DEBUG else "An unexpected error occurred"
        }
    )

# Register routes
app.include_router(auth.router, prefix="/api/v1")
app.include_router(character_profiles.router, prefix="/api/v1")
app.include_router(fmt_templates.router, prefix="/api/v1") 
app.include_router(health.router, prefix="/api/v1")
app.include_router(metrics.router, prefix="/api/v1")
app.include_router(engine.router, prefix="/api/v1")
app.include_router(plugin_system.router, prefix="/api/v1")
app.include_router(plugins.router, prefix="/api/v1")
app.include_router(storage.router, prefix="/api/v1")
app.include_router(interface_adapter.router, prefix="/api/v1")
app.include_router(mem0_router, prefix="/api/v1")
app.include_router(mcp_router, prefix="/api/v1")
app.include_router(endpoint_status.router, prefix="/api/v1")

@app.get("/")
async def root():
    """
    Root endpoint for the API
    """
    return {
        "message": "Space API is running",
        "version": settings.API_VERSION,
        "environment": settings.ENVIRONMENT,
        "docs": "/docs"
    }

if __name__ == "__main__":
    import uvicorn
    import os
    
    # Get port from environment variable or use default
    port = int(os.environ.get("PORT", 8000))
    
    # Run the API with hot reload in development
    reload = settings.ENVIRONMENT == "development"
    
    uvicorn.run(
        "api.main:app", 
        host="0.0.0.0", 
        port=port, 
        reload=reload,
        log_level=settings.LOG_LEVEL.lower()
    )
